%%
#include <iostream>
#include <cstdio>
#include <memory>
#include <stdexcept>
#include <array>
#include <vector>

using namespace std;
%%


%%
namespace {

int run(const char* cmd, string& output) {
  array<char, 128> buffer;
  output.clear();

  string modifiedCmd = string(cmd) + " 2>/dev/null"; // To suppress stderr

  using PcloseFunc = int (*)(FILE*);
  unique_ptr<FILE, PcloseFunc> pipe(popen(modifiedCmd.c_str(), "r"), pclose);

  if (!pipe) {
    throw runtime_error("popen() failed!");
  }

  while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
    output += buffer.data();
  }

  int exitCode = pclose(pipe.release());
  return WEXITSTATUS(exitCode);
}


} // unnamed namespace
%%


%%
namespace {

refalrts::FnResult string_from_seq(
  vector<char>& string,
  refalrts::Iter begin,
  refalrts::Iter end
) {
  vector<char> result;

  enum { cBufLen = 100 };
  char buffer[cBufLen + 1] = { 0 };

  unsigned read;
  while ((read = refalrts::read_chars(buffer, cBufLen, begin, end)) != 0) {
    // В текущей версии Open Watcom (и форка Open Watcom V2) есть ошибка
    // в функции vector::insert, которая возникает в случае,
    // если во время вставки вектор увеличивает свою ёмкость (capacity).
    // Для обхода этой ошибки предварительно резервируем место.
    result.reserve(result.size() + read + 1);
    result.insert(result.end(), buffer, buffer + read);
  }

  /*
    Здесь refalrts::empty_seq(begin, end) || (begin->tag != cDataChar).
  */

  if (refalrts::empty_seq(begin, end)) {
    result.push_back('\0');
    string.swap(result);
    return refalrts::cSuccess;
  } else {
    // здесь begin->tag != cDataChar
    return refalrts::cRecognitionImpossible;
  }
}

}  // unnamed namespace
%%


$ENTRY Shell {
%%
  refalrts::Iter cmd_b = 0;
  refalrts::Iter cmd_e = 0;
  refalrts::call_left(cmd_b, cmd_e, arg_begin, arg_end);

  vector<char> cmd;
  refalrts::FnResult cmd_res = string_from_seq(cmd, cmd_b, cmd_e);

  if (cmd_res != refalrts::cSuccess) return cmd_res;

  char* cmd_c_str = & cmd[0];

  string output;
  int _ = run(cmd_c_str, output);

  refalrts::Iter output_b = 0;
  refalrts::Iter output_e = 0;
  refalrts::alloc_string(vm, output_b, output_e, output.c_str());
  refalrts::splice_evar(arg_begin, output_b, output_e);
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
%%
}
